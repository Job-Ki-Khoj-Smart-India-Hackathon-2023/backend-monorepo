/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: jkk_job.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export class JKKJob extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        mongo_id?: string;
        job_title?: string;
        description?: string;
        location?: dependency_1.Location;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mongo_id" in data && data.mongo_id != undefined) {
                this.mongo_id = data.mongo_id;
            }
            if ("job_title" in data && data.job_title != undefined) {
                this.job_title = data.job_title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
        }
    }
    get mongo_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set mongo_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get job_title() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set job_title(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get location() {
        return pb_1.Message.getWrapperField(this, dependency_1.Location, 5) as dependency_1.Location;
    }
    set location(value: dependency_1.Location) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_location() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        mongo_id?: string;
        job_title?: string;
        description?: string;
        location?: ReturnType<typeof dependency_1.Location.prototype.toObject>;
    }): JKKJob {
        const message = new JKKJob({});
        if (data.mongo_id != null) {
            message.mongo_id = data.mongo_id;
        }
        if (data.job_title != null) {
            message.job_title = data.job_title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.location != null) {
            message.location = dependency_1.Location.fromObject(data.location);
        }
        return message;
    }
    toObject() {
        const data: {
            mongo_id?: string;
            job_title?: string;
            description?: string;
            location?: ReturnType<typeof dependency_1.Location.prototype.toObject>;
        } = {};
        if (this.mongo_id != null) {
            data.mongo_id = this.mongo_id;
        }
        if (this.job_title != null) {
            data.job_title = this.job_title;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.location != null) {
            data.location = this.location.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.mongo_id.length)
            writer.writeString(1, this.mongo_id);
        if (this.job_title.length)
            writer.writeString(3, this.job_title);
        if (this.description.length)
            writer.writeString(4, this.description);
        if (this.has_location)
            writer.writeMessage(5, this.location, () => this.location.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JKKJob {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JKKJob();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.mongo_id = reader.readString();
                    break;
                case 3:
                    message.job_title = reader.readString();
                    break;
                case 4:
                    message.description = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.location, () => message.location = dependency_1.Location.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JKKJob {
        return JKKJob.deserialize(bytes);
    }
}
export class JKKJobList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ids?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ids" in data && data.ids != undefined) {
                this.ids = data.ids;
            }
        }
    }
    get ids() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set ids(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        ids?: string[];
    }): JKKJobList {
        const message = new JKKJobList({});
        if (data.ids != null) {
            message.ids = data.ids;
        }
        return message;
    }
    toObject() {
        const data: {
            ids?: string[];
        } = {};
        if (this.ids != null) {
            data.ids = this.ids;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ids.length)
            writer.writeRepeatedString(1, this.ids);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JKKJobList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JKKJobList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JKKJobList {
        return JKKJobList.deserialize(bytes);
    }
}
